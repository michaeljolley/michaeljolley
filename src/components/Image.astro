---
	import cloudinary from 'cloudinary'; 
  import path from 'path';

	cloudinary.v2.config({ 
		cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME || process.env.CLOUDINARY_CLOUD_NAME, 
		api_key: import.meta.env.CLOUDINARY_API_KEY || proccess.env.CLOUDINARY_API_KEY, 
		api_secret: import.meta.env.CLOUDINARY_API_SECRET || process.env.CLOUDINARY_API_SECRET,
		secure: true
	});
    
  const findAsset = async (publicId, folder) => {
    try {
			return await cloudinary.v2.api.resource(`${folder}/${publicId}`.substring(1), {
				type: 'upload'
			})
    } catch (err) {
      console.log(
        // eslint-disable-line no-console
        `$cloudinary.findAsset error.\nfolder: ${folder}\npublicId: ${publicId}\n`,
        err
      )
      return null
    }
  }

  const uploadAsset = async (imagePath, publicId, folder) => {
    try {
			return await cloudinary.v2.uploader.upload(imagePath, {
				folder,
				public_id: publicId
			});
		} catch (err) {
      console.log(
        // eslint-disable-line no-console
        `$cloudinary.uploadAsset error.\nfolder: ${folder}\npublicId: ${publicId}\n`,
        err
      )
      return null
    }
  }

  const getAsset = async (imagePath, publicId, folder) => {
    let asset = await findAsset(publicId, folder)
    if (!asset) {
      asset = await uploadAsset(imagePath, publicId, folder)
    }

    if (asset) {
      return {
        public_id: asset.public_id,
        secure_url: asset.secure_url,
      }
    }

    return null
  }

  const allPosts = await Astro.glob('../content/blog/**/*.md');
	const slug = Astro.params.slug;

	const postDir = (allPosts.find((post) => {
		const pathParts = post.file.replace('/index.md', '').split('/');
    return slug === pathParts[pathParts.length - 1];
	})).file.replace('index.md', '');

	const { alt, src, style } = Astro.props;
  const imagePath = path.join(postDir, src);
  const publicId = `${src.replace(path.extname(src), '').replace('./','')}`
  const asset = await getAsset(imagePath, publicId, `/blog/${slug}/`)
	
	const cloudinarySrc = asset.secure_url;

---

<img alt={alt} style={style} src={cloudinarySrc} />

