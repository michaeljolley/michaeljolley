---
import Icon from "./Icon.astro";

export interface Props {
  mentions: Array<any>;
  displayQuantity?: number;
  displayLink?: boolean;
  displayMessage?: boolean;
}

const { mentions, displayQuantity, displayLink, displayMessage } = Astro.props;

const avatars = [
  ...new Set(
    mentions
      .sort((a, b) => (new Date(a.published) < new Date(b.published) ? 1 : -1))
      .map((f) => {
        return {
          avatar: f.author.photo,
          url: f.source,
          name: f.author.name,
        };
      })
  ),
];

const uniqueAvatars = Array.from(new Set(avatars.map((s) => s.avatar))).map(
  (avatar) => {
    return {
      avatar: avatar,
      url: avatars.find((s) => s.avatar === avatar)?.url,
      name: avatars.find((s) => s.avatar === avatar)?.name,
    };
  }
);

const displayedAvatars = uniqueAvatars.slice(0, displayQuantity);

const remainingAvatars = uniqueAvatars.length - displayedAvatars.length;
---

<aside class="avatars">
  {
    displayMessage && displayedAvatars.length > 0 && (
      <p>
        <Icon icon="ThumbsUp" /> Likes, retweets, & replies
      </p>
    )
  }
  <div class="icons">
    {
      displayedAvatars.map((avatar: any) => (
        <div class="avatar">
          {displayLink && (
            <a href={avatar.url} target="_blank">
              <img src={avatar.avatar} alt={avatar.name} />
            </a>
          )}

          {!displayLink && <img src={avatar.avatar} alt={avatar.name} />}
        </div>
      ))
    }

    {
      remainingAvatars > 0 && (
        <div class="extra">
          <span>+{remainingAvatars}</span>
        </div>
      )
    }
  </div>
</aside>
