---
import LargeCard from "./cards/LargeCard.astro";
import SmallCard from "./cards/SmallCard.astro";

export interface Props {
  items: Array<any>;
  alt?: boolean;
}

const { items, alt } = Astro.props as Props;

const postGroups = items.reduce(
  (r: Array<any>, e, i) => (i % 3 ? r[r.length - 1].push(e) : r.push([e])) && r,
  []
);
---

<section class={alt ? "alt" : "default"}>
  {
    postGroups.map((postGroup: any, groupIndex: number) => {
      const largeIndex = groupIndex % 2 === 0 ? (alt ? 1 : 0) : alt ? 0 : 1;
      return postGroup.map((item: any, itemIndex: number) => {
        return largeIndex === itemIndex ? (
          <LargeCard
            title={item.title}
            description={item.description}
            image={item.image}
            imageAlt={item.imageAlt}
            mentions={item.mentions}
            path={item.path}
            displayQuantity={10}
          />
        ) : (
          <SmallCard
            title={item.title}
            description={item.description}
            image={item.image}
            mentions={item.mentions}
            path={item.path}
            displayQuantity={10}
          />
        );
      });
    })
  }
</section>

<style lang="scss">
  section {
    @apply grid gap-8;
    grid-template-columns: 1fr;

    @screen md {
      grid-template-columns: repeat(2, 1fr);

      &.default {
        :nth-child(6n + 1),
        :nth-child(6n + 5) {
          grid-row: span 2;
        }

        :nth-child(6n + 2),
        :nth-child(6n + 3),
        :nth-child(6n + 4),
        :nth-child(6n + 6) {
          grid-column: span 1;
        }
      }

      &.alt {
        :nth-child(6n + 2),
        :nth-child(6n + 4) {
          grid-row: span 2;
        }

        :nth-child(6n + 1),
        :nth-child(6n + 3),
        :nth-child(6n + 5),
        :nth-child(6n + 6) {
          grid-column: span 1;
        }
      }
    }
  }
</style>
